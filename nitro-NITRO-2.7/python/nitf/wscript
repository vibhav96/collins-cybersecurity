from os.path import join, basename
import os
from waflib import Utils
distclean = options = configure = lambda p: None

def build(bld):
    variant = bld.env['VARIANT'] or 'default'
    env = bld.all_envs[variant]
    # For some reason this doesn't always happen otherwise..
    bld.env['PYTHONDIR'] = env['PYTHONDIR']

    # first compile a few py files
    obj = bld(features = 'py', env=env.derive(),
                           install_path='${PYTHONDIR}/nitf',
                           source=bld.path.make_node('source').ant_glob('**/*.py'))
    
    # then a c extension module
    if 'SWIG' in env and env['SWIG']:
        def copyGeneratedSources(tsk):
            import shutil
            genDir = tsk.inputs[0].parent.make_node('generated')
            instDir = Utils.subst_vars(tsk.generator.install_path, tsk.env).replace('/', os.sep)
            Utils.check_dir(genDir.abspath())
            if tsk.generator.bld.is_install:
                Utils.check_dir(instDir)
            for file in tsk.outputs:
                name = basename(str(file))
                if file.suffix() in ['.c', '.cxx']:
                    shutil.copy2(file.abspath(), genDir.make_node(name.split('.')[0] + '_wrap.c').abspath())
                elif file.suffix() == '.py':
                    shutil.copy2(file.abspath(), genDir.make_node(name).abspath())
                    if tsk.generator.bld.is_install:
                        shutil.copy2(file.abspath(), join(instDir, name))
                    
        tsk = bld(
            features = 'c cshlib pyext',
            source = 'source/nitro.i',
            target = '_nitropy',
            use='nitf-c',
            env=env.derive(),
            swig_flags='-python',
            install_path='${PYTHONDIR}/nitf',
            name='nitf-python',
            swig_install_fun=copyGeneratedSources)
        
    else:
        bld(
            features = 'c cshlib pyext',
            source = 'source/generated/nitropy_wrap.c',
            target = '_nitropy',
            use='nitf-c',
            env=env.derive(),
            install_path='${PYTHONDIR}/nitf')

